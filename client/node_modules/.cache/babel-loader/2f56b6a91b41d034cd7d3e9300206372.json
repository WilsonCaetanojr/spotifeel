{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if('serviceWorker'in navigator){window.addEventListener('load',function(){navigator.serviceWorker.register('/sw.js').then(function(registration){console.log('ServiceWorker registration successful with scope: ',registration.scope);}).catch(function(err){console.log('ServiceWorker registration failed: ',err);});});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log('New content is available and will be used when all '+'tabs for this page are closed. See https://bit.ly/CRA-PWA.');// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();}).catch(function(error){console.error(error.message);});}}","map":{"version":3,"sources":["C:/Users/guilh/Desktop/ai-emotions2.0/client/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","addEventListener","serviceWorker","then","registration","console","log","scope","catch","err","registerValidSW","swUrl","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","checkValidServiceWorker","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","message"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if ('serviceWorker' in navigator) {\n        window.addEventListener('load', function () {\n            navigator.serviceWorker.register('/sw.js').then(function (registration) {\n                console.log('ServiceWorker registration successful with scope: ', registration.scope);\n            }).catch(function (err) {\n                console.log('ServiceWorker registration failed: ', err);\n            });\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}