{"ast":null,"code":"import { getLastMusicByPlaylist, modifyPlaylistMusics } from '../services/PlaylistService';\nimport arrayMove from 'array-move';\nexport default function useMusic([videoFile, setVideoFile], [playlists, setPlaylists], [selectedPlaylist, setSelectedPlaylist]) {\n  async function _selectMusic(selectPlaylist, music) {\n    const newVideoFile = { ...music\n    };\n    setSelectedPlaylist(selectPlaylist);\n    setVideoFile(newVideoFile);\n  }\n\n  async function changeOrderMusic(selectPlaylist, actualPos, newPos) {\n    const newMusics = arrayMove(selectPlaylist.music, actualPos, newPos);\n    const newPlaylists = [...playlists];\n    const playlistInfo = await modifyPlaylistMusics(selectPlaylist._id, newMusics);\n    newPlaylists[playlists.indexOf(selectPlaylist)].music = playlistInfo;\n    setPlaylists(newPlaylists);\n  }\n\n  async function handlerSetPlaylistRandom() {\n    const selectPlaylist = playlists[Math.floor(Math.random() * 4)];\n\n    if (playlists.length > 0) {\n      const file = await getLastMusicByPlaylist(selectPlaylist);\n\n      _selectMusic(selectPlaylist, file);\n\n      changeOrderMusic(selectPlaylist, 0, selectPlaylist.music.length - 1);\n    }\n  }\n\n  async function handlerSetMusic(musicFile) {\n    let selectedPlaylist = {};\n    let musicFind = {};\n\n    for (let element of playlists) {\n      musicFind = element.music.filter(music => music.value._id == musicFile._id);\n      element.music.forEach(music => {\n        console.log(music.value._id, musicFile._id);\n      });\n\n      if (musicFind) {\n        console.log();\n        selectedPlaylist = element;\n        break;\n      }\n    }\n\n    if (playlists.length > 0) {\n      _selectMusic(selectedPlaylist, musicFind[0]);\n    }\n  }\n\n  return {\n    handlerSetPlaylistRandom,\n    handlerSetMusic,\n    changeOrderMusic\n  };\n}","map":{"version":3,"sources":["C:/Users/guilh/Desktop/ai-emotions2.0/client/src/hooks/useMusic.js"],"names":["getLastMusicByPlaylist","modifyPlaylistMusics","arrayMove","useMusic","videoFile","setVideoFile","playlists","setPlaylists","selectedPlaylist","setSelectedPlaylist","_selectMusic","selectPlaylist","music","newVideoFile","changeOrderMusic","actualPos","newPos","newMusics","newPlaylists","playlistInfo","_id","indexOf","handlerSetPlaylistRandom","Math","floor","random","length","file","handlerSetMusic","musicFile","musicFind","element","filter","value","forEach","console","log"],"mappings":"AAAA,SAASA,sBAAT,EAAiCC,oBAAjC,QAA6D,6BAA7D;AACA,OAAOC,SAAP,MAAuB,YAAvB;AAEA,eAAe,SAASC,QAAT,CACX,CAACC,SAAD,EAAYC,YAAZ,CADW,EAEX,CAACC,SAAD,EAAYC,YAAZ,CAFW,EAGX,CAACC,gBAAD,EAAmBC,mBAAnB,CAHW,EAId;AACG,iBAAeC,YAAf,CAA4BC,cAA5B,EAA4CC,KAA5C,EAAkD;AAC9C,UAAMC,YAAY,GAAG,EAAC,GAAGD;AAAJ,KAArB;AACAH,IAAAA,mBAAmB,CAACE,cAAD,CAAnB;AACAN,IAAAA,YAAY,CAACQ,YAAD,CAAZ;AACH;;AAED,iBAAeC,gBAAf,CAAgCH,cAAhC,EAAgDI,SAAhD,EAA2DC,MAA3D,EAAkE;AAC9D,UAAMC,SAAS,GAAGf,SAAS,CAACS,cAAc,CAACC,KAAhB,EAAuBG,SAAvB,EAAkCC,MAAlC,CAA3B;AACA,UAAME,YAAY,GAAG,CAAC,GAAGZ,SAAJ,CAArB;AACA,UAAMa,YAAY,GAAG,MAAMlB,oBAAoB,CAACU,cAAc,CAACS,GAAhB,EAAqBH,SAArB,CAA/C;AACAC,IAAAA,YAAY,CAACZ,SAAS,CAACe,OAAV,CAAkBV,cAAlB,CAAD,CAAZ,CAAgDC,KAAhD,GAAwDO,YAAxD;AAEAZ,IAAAA,YAAY,CAACW,YAAD,CAAZ;AACH;;AAED,iBAAeI,wBAAf,GAA0C;AACtC,UAAMX,cAAc,GAAGL,SAAS,CAACiB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAD,CAAhC;;AACA,QAAGnB,SAAS,CAACoB,MAAV,GAAmB,CAAtB,EAAyB;AACrB,YAAMC,IAAI,GAAG,MAAM3B,sBAAsB,CAACW,cAAD,CAAzC;;AACAD,MAAAA,YAAY,CAACC,cAAD,EAAiBgB,IAAjB,CAAZ;;AACAb,MAAAA,gBAAgB,CAACH,cAAD,EAAiB,CAAjB,EAAoBA,cAAc,CAACC,KAAf,CAAqBc,MAArB,GAA4B,CAAhD,CAAhB;AACH;AAEJ;;AAED,iBAAeE,eAAf,CAA+BC,SAA/B,EAA0C;AACtC,QAAIrB,gBAAgB,GAAG,EAAvB;AACA,QAAIsB,SAAS,GAAG,EAAhB;;AACA,SAAI,IAAIC,OAAR,IAAmBzB,SAAnB,EAA6B;AACzBwB,MAAAA,SAAS,GAAGC,OAAO,CAACnB,KAAR,CAAcoB,MAAd,CAAsBpB,KAAD,IAASA,KAAK,CAACqB,KAAN,CAAYb,GAAZ,IAAmBS,SAAS,CAACT,GAA3D,CAAZ;AACAW,MAAAA,OAAO,CAACnB,KAAR,CAAcsB,OAAd,CAAuBtB,KAAD,IAAS;AAC3BuB,QAAAA,OAAO,CAACC,GAAR,CAAYxB,KAAK,CAACqB,KAAN,CAAYb,GAAxB,EAA6BS,SAAS,CAACT,GAAvC;AACH,OAFD;;AAGA,UAAGU,SAAH,EAAa;AACTK,QAAAA,OAAO,CAACC,GAAR;AACA5B,QAAAA,gBAAgB,GAAGuB,OAAnB;AACA;AACH;AACJ;;AAED,QAAGzB,SAAS,CAACoB,MAAV,GAAmB,CAAtB,EAAyB;AACrBhB,MAAAA,YAAY,CAACF,gBAAD,EAAmBsB,SAAS,CAAC,CAAD,CAA5B,CAAZ;AACH;AACJ;;AAED,SAAO;AACHR,IAAAA,wBADG;AAEHM,IAAAA,eAFG;AAGHd,IAAAA;AAHG,GAAP;AAKH","sourcesContent":["import { getLastMusicByPlaylist, modifyPlaylistMusics } from '../services/PlaylistService'\r\nimport arrayMove  from 'array-move'\r\n\r\nexport default function useMusic(\r\n    [videoFile, setVideoFile],\r\n    [playlists, setPlaylists],\r\n    [selectedPlaylist, setSelectedPlaylist]\r\n){\r\n    async function _selectMusic(selectPlaylist, music){\r\n        const newVideoFile = {...music}\r\n        setSelectedPlaylist(selectPlaylist)\r\n        setVideoFile(newVideoFile)\r\n    } \r\n\r\n    async function changeOrderMusic(selectPlaylist, actualPos, newPos){\r\n        const newMusics = arrayMove(selectPlaylist.music, actualPos, newPos)\r\n        const newPlaylists = [...playlists]\r\n        const playlistInfo = await modifyPlaylistMusics(selectPlaylist._id, newMusics)\r\n        newPlaylists[playlists.indexOf(selectPlaylist)].music = playlistInfo\r\n\r\n        setPlaylists(newPlaylists)\r\n    }\r\n    \r\n    async function handlerSetPlaylistRandom() {\r\n        const selectPlaylist = playlists[Math.floor(Math.random() * 4)]\r\n        if(playlists.length > 0) {\r\n            const file = await getLastMusicByPlaylist(selectPlaylist)\r\n            _selectMusic(selectPlaylist, file)\r\n            changeOrderMusic(selectPlaylist, 0, selectPlaylist.music.length-1)\r\n        }\r\n       \r\n    }\r\n\r\n    async function handlerSetMusic(musicFile) {\r\n        let selectedPlaylist = {}\r\n        let musicFind = {}\r\n        for(let element of playlists){\r\n            musicFind = element.music.filter((music)=>music.value._id == musicFile._id)\r\n            element.music.forEach((music)=>{\r\n                console.log(music.value._id, musicFile._id)\r\n            })\r\n            if(musicFind){\r\n                console.log()\r\n                selectedPlaylist = element\r\n                break\r\n            }\r\n        }\r\n\r\n        if(playlists.length > 0) {\r\n            _selectMusic(selectedPlaylist, musicFind[0])\r\n        }\r\n    }\r\n\r\n    return {\r\n        handlerSetPlaylistRandom,\r\n        handlerSetMusic,\r\n        changeOrderMusic\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}