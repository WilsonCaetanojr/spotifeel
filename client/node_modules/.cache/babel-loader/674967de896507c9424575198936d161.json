{"ast":null,"code":"import { modifyPlaylistMusics, getPlaylistByIdUser, getTitleVideo, insertIntoPlaylistMusicOtherSite, insertIntoPlaylistMusics } from '../services/PlaylistService';\nimport arrayMove from 'array-move';\nexport default function usePlaylist([playlists, setPlaylists]) {\n  async function playlistsUser(userId) {\n    const infoPlaylists = await getPlaylistByIdUser(userId);\n\n    if (Array.isArray(infoPlaylists) && infoPlaylists.length > 0) {\n      setPlaylists(infoPlaylists);\n    }\n  }\n\n  async function onSortEnd({\n    oldIndex,\n    newIndex\n  }, playlistId) {\n    const [playlistWhoChanged] = playlists.filter(playlist => playlist._id == playlistId);\n    const newMusics = arrayMove(playlistWhoChanged.music, oldIndex, newIndex);\n    const newPlaylists = [...playlists];\n    const playlistInfo = await modifyPlaylistMusics(playlistId, newMusics);\n    console.log(pla);\n    newPlaylists[playlists.indexOf(playlistWhoChanged)].music = playlistInfo.music;\n    setPlaylists(newPlaylists);\n  }\n\n  const addingMusic = async (files, idPlaylist, userId) => {\n    var formData = new FormData();\n    var arrFiles = [...files];\n    arrFiles.forEach(file => {\n      console.log(file);\n      formData.append('file', file);\n    });\n    await insertIntoPlaylistMusics(idPlaylist, formData);\n    const infoPlaylists = await getPlaylistByIdUser(userId);\n    setPlaylists(infoPlaylists);\n  };\n\n  const addingMusicLink = async (link, idPlaylist, userId) => {\n    if (!link) return;\n    const infoMusica = await getTitleVideo(link);\n    await insertIntoPlaylistMusicOtherSite(idPlaylist, {\n      url: link,\n      title: infoMusica.items[0].snippet.title\n    });\n    const infoPlaylists = await getPlaylistByIdUser(userId);\n    setPlaylists(infoPlaylists);\n  };\n\n  return {\n    playlistsUser,\n    onSortEnd,\n    addingMusic,\n    addingMusicLink\n  };\n}","map":{"version":3,"sources":["C:/Users/guilh/Desktop/ai-emotions2.0/client/src/hooks/usePlaylist.js"],"names":["modifyPlaylistMusics","getPlaylistByIdUser","getTitleVideo","insertIntoPlaylistMusicOtherSite","insertIntoPlaylistMusics","arrayMove","usePlaylist","playlists","setPlaylists","playlistsUser","userId","infoPlaylists","Array","isArray","length","onSortEnd","oldIndex","newIndex","playlistId","playlistWhoChanged","filter","playlist","_id","newMusics","music","newPlaylists","playlistInfo","console","log","pla","indexOf","addingMusic","files","idPlaylist","formData","FormData","arrFiles","forEach","file","append","addingMusicLink","link","infoMusica","url","title","items","snippet"],"mappings":"AAAA,SAASA,oBAAT,EAA+BC,mBAA/B,EAAoDC,aAApD,EAAmEC,gCAAnE,EAAqGC,wBAArG,QAAqI,6BAArI;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,eAAe,SAASC,WAAT,CAAqB,CAACC,SAAD,EAAYC,YAAZ,CAArB,EAAgD;AAE3D,iBAAeC,aAAf,CAA6BC,MAA7B,EAAqC;AACjC,UAAMC,aAAa,GAAG,MAAMV,mBAAmB,CAACS,MAAD,CAA/C;;AACA,QAAIE,KAAK,CAACC,OAAN,CAAcF,aAAd,KAAgCA,aAAa,CAACG,MAAd,GAAuB,CAA3D,EAA8D;AAC1DN,MAAAA,YAAY,CAACG,aAAD,CAAZ;AACH;AACJ;;AAED,iBAAeI,SAAf,CAAyB;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAzB,EAAiDC,UAAjD,EAA6D;AACzD,UAAM,CAACC,kBAAD,IAAuBZ,SAAS,CAACa,MAAV,CAAkBC,QAAD,IAAcA,QAAQ,CAACC,GAAT,IAAgBJ,UAA/C,CAA7B;AACA,UAAMK,SAAS,GAAGlB,SAAS,CAACc,kBAAkB,CAACK,KAApB,EAA2BR,QAA3B,EAAqCC,QAArC,CAA3B;AACA,UAAMQ,YAAY,GAAG,CAAC,GAAGlB,SAAJ,CAArB;AACA,UAAMmB,YAAY,GAAG,MAAM1B,oBAAoB,CAACkB,UAAD,EAAaK,SAAb,CAA/C;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACAJ,IAAAA,YAAY,CAAClB,SAAS,CAACuB,OAAV,CAAkBX,kBAAlB,CAAD,CAAZ,CAAoDK,KAApD,GAA4DE,YAAY,CAACF,KAAzE;AAEAhB,IAAAA,YAAY,CAACiB,YAAD,CAAZ;AACH;;AAED,QAAMM,WAAW,GAAG,OAAOC,KAAP,EAAcC,UAAd,EAA0BvB,MAA1B,KAAqC;AACrD,QAAIwB,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACA,QAAIC,QAAQ,GAAG,CAAC,GAAGJ,KAAJ,CAAf;AACAI,IAAAA,QAAQ,CAACC,OAAT,CAAkBC,IAAD,IAAU;AACvBX,MAAAA,OAAO,CAACC,GAAR,CAAYU,IAAZ;AACAJ,MAAAA,QAAQ,CAACK,MAAT,CAAgB,MAAhB,EAAwBD,IAAxB;AACH,KAHD;AAIA,UAAMlC,wBAAwB,CAAC6B,UAAD,EAAaC,QAAb,CAA9B;AACA,UAAMvB,aAAa,GAAG,MAAMV,mBAAmB,CAACS,MAAD,CAA/C;AACAF,IAAAA,YAAY,CAACG,aAAD,CAAZ;AACH,GAVD;;AAYA,QAAM6B,eAAe,GAAG,OAAOC,IAAP,EAAaR,UAAb,EAAyBvB,MAAzB,KAAoC;AACxD,QAAI,CAAC+B,IAAL,EAAW;AACX,UAAMC,UAAU,GAAG,MAAMxC,aAAa,CAACuC,IAAD,CAAtC;AACA,UAAMtC,gCAAgC,CAAC8B,UAAD,EAAa;AAC/CU,MAAAA,GAAG,EAAEF,IAD0C;AAE/CG,MAAAA,KAAK,EAAEF,UAAU,CAACG,KAAX,CAAiB,CAAjB,EAAoBC,OAApB,CAA4BF;AAFY,KAAb,CAAtC;AAIA,UAAMjC,aAAa,GAAG,MAAMV,mBAAmB,CAACS,MAAD,CAA/C;AACAF,IAAAA,YAAY,CAACG,aAAD,CAAZ;AACH,GATD;;AAWA,SAAO;AACHF,IAAAA,aADG;AAEHM,IAAAA,SAFG;AAGHgB,IAAAA,WAHG;AAIHS,IAAAA;AAJG,GAAP;AAOH","sourcesContent":["import { modifyPlaylistMusics, getPlaylistByIdUser, getTitleVideo, insertIntoPlaylistMusicOtherSite, insertIntoPlaylistMusics } from '../services/PlaylistService'\r\nimport arrayMove from 'array-move'\r\n\r\nexport default function usePlaylist([playlists, setPlaylists]) {\r\n\r\n    async function playlistsUser(userId) {\r\n        const infoPlaylists = await getPlaylistByIdUser(userId)\r\n        if (Array.isArray(infoPlaylists) && infoPlaylists.length > 0) {\r\n            setPlaylists(infoPlaylists)\r\n        }\r\n    }\r\n\r\n    async function onSortEnd({ oldIndex, newIndex }, playlistId) {\r\n        const [playlistWhoChanged] = playlists.filter((playlist) => playlist._id == playlistId)\r\n        const newMusics = arrayMove(playlistWhoChanged.music, oldIndex, newIndex)\r\n        const newPlaylists = [...playlists]\r\n        const playlistInfo = await modifyPlaylistMusics(playlistId, newMusics)\r\n        console.log(pla)\r\n        newPlaylists[playlists.indexOf(playlistWhoChanged)].music = playlistInfo.music\r\n\r\n        setPlaylists(newPlaylists)\r\n    }\r\n\r\n    const addingMusic = async (files, idPlaylist, userId) => {\r\n        var formData = new FormData()\r\n        var arrFiles = [...files]\r\n        arrFiles.forEach((file) => {\r\n            console.log(file)\r\n            formData.append('file', file)\r\n        })\r\n        await insertIntoPlaylistMusics(idPlaylist, formData)\r\n        const infoPlaylists = await getPlaylistByIdUser(userId)\r\n        setPlaylists(infoPlaylists)\r\n    }\r\n\r\n    const addingMusicLink = async (link, idPlaylist, userId) => {\r\n        if (!link) return\r\n        const infoMusica = await getTitleVideo(link)\r\n        await insertIntoPlaylistMusicOtherSite(idPlaylist, {\r\n            url: link,\r\n            title: infoMusica.items[0].snippet.title\r\n        })\r\n        const infoPlaylists = await getPlaylistByIdUser(userId)\r\n        setPlaylists(infoPlaylists)\r\n    }\r\n\r\n    return {\r\n        playlistsUser,\r\n        onSortEnd,\r\n        addingMusic,\r\n        addingMusicLink\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}