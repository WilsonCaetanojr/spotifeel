{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/guilh/Desktop/ai-emotions2.0/client/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","addEventListener","swUrl","process","env","PUBLIC_URL","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n          \n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}