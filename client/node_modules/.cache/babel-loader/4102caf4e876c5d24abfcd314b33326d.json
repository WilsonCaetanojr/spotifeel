{"ast":null,"code":"export async function getPlaylistByIdUser(userId) {\n  return await fetch(`/playlist/${userId}`, {\n    method: 'GET'\n  }).then(response => response.json()).then(json => json).catch(err => err);\n}\nexport async function insertIntoPlaylistMusics(playlist, musicsFile) {\n  return await fetch(`/playlist/${playlist}`, {\n    method: 'POST',\n    body: musicsFile\n  }).then(response => response.json()).then(json => json).catch(err => err);\n}\nexport async function insertIntoPlaylistMusicOtherSite(playlist, infoMusic) {\n  console.log(infoMusic);\n  return await fetch(`/playlist/url/${playlist}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      url: infoMusic.url,\n      title: infoMusic.title\n    })\n  }).then(response => response.json()).then(json => json).catch(err => err);\n}\nexport async function getTitleVideo(title) {\n  var _title$split$1$replac, _title$split$, _title$split$$replace;\n\n  const json = (_title$split$1$replac = (_title$split$ = title.split(\"watch?\")[1]) === null || _title$split$ === void 0 ? void 0 : (_title$split$$replace = _title$split$.replace(/&/g, \"\\\",\\\"\")) === null || _title$split$$replace === void 0 ? void 0 : _title$split$$replace.replace(/=/g, \"\\\":\\\"\")) !== null && _title$split$1$replac !== void 0 ? _title$split$1$replac : \"\";\n  const uri = decodeURI(json);\n  const url = JSON.parse('{\"' + uri + '\"}');\n  return await fetch(`https://www.googleapis.com/youtube/v3/videos?id=${url.v}&part=snippet&key=AIzaSyB6RIhy9OAPqssx7A1wIc1FQwhLuif7mQw`, {\n    method: 'GET'\n  }).then(response => response.json()).then(json => json).catch(err => err);\n}\nexport async function modifyPlaylistMusics(playlist, musicsFile) {\n  return await fetch(`/playlist/${playlist}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      files: [...musicsFile]\n    })\n  }).then(response => response.json()).then(json => json).catch(err => err);\n}\nexport async function getLastMusicByPlaylist(playlist) {\n  return await fetch(`/ultimaMusica/playlist/${playlist._id}`, {\n    method: 'GET'\n  }).then(response => response.json()).then(json => json).catch(err => err);\n}","map":{"version":3,"sources":["C:/Users/guilh/Desktop/ai-emotions2.0/client/src/services/PlaylistService.js"],"names":["getPlaylistByIdUser","userId","fetch","method","then","response","json","catch","err","insertIntoPlaylistMusics","playlist","musicsFile","body","insertIntoPlaylistMusicOtherSite","infoMusic","console","log","headers","JSON","stringify","url","title","getTitleVideo","split","replace","uri","decodeURI","parse","v","modifyPlaylistMusics","files","getLastMusicByPlaylist","_id"],"mappings":"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","sourcesContent":["export async function getPlaylistByIdUser(userId){\r\n    return await fetch(`/playlist/${userId}`, {\r\n        method: 'GET',\r\n    })\r\n    .then(response => response.json())\r\n    .then(json => json)\r\n    .catch(err => err)\r\n}\r\n\r\nexport async function insertIntoPlaylistMusics(playlist, musicsFile){\r\n    return await fetch(`/playlist/${playlist}`, {\r\n        method: 'POST',\r\n        body: musicsFile\r\n    })\r\n    .then(response => response.json())\r\n    .then(json => json)\r\n    .catch(err => err)\r\n}\r\n\r\nexport async function insertIntoPlaylistMusicOtherSite(playlist, infoMusic){\r\n    console.log(infoMusic)\r\n    return await fetch(`/playlist/url/${playlist}`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({url:infoMusic.url, title: infoMusic.title})\r\n    })\r\n    .then(response => response.json())\r\n    .then(json => json)\r\n    .catch(err => err)\r\n}\r\n\r\nexport async function getTitleVideo(title){\r\n    const json = title.split(\"watch?\")[1]?.replace(/&/g, \"\\\",\\\"\")?.replace(/=/g,\"\\\":\\\"\")??\"\"\r\n    const uri = decodeURI(json)\r\n    const url = JSON.parse('{\"' + uri + '\"}')\r\n    return await fetch(`https://www.googleapis.com/youtube/v3/videos?id=${url.v}&part=snippet&key=AIzaSyB6RIhy9OAPqssx7A1wIc1FQwhLuif7mQw`, {\r\n        method: 'GET',\r\n    })\r\n    .then(response => response.json())\r\n    .then(json => json)\r\n    .catch(err => err)\r\n}\r\n\r\nexport async function modifyPlaylistMusics(playlist, musicsFile){\r\n    return await fetch(`/playlist/${playlist}`, {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n            files: [...musicsFile]\r\n        })\r\n    })\r\n    .then(response => response.json())\r\n    .then(json => json)\r\n    .catch(err => err)\r\n}\r\n\r\nexport async function getLastMusicByPlaylist(playlist){\r\n    return await fetch(`/ultimaMusica/playlist/${playlist._id}`, {\r\n        method: 'GET',\r\n    })\r\n    .then(response => response.json())\r\n    .then(json => json)\r\n    .catch(err => err)\r\n}"]},"metadata":{},"sourceType":"module"}